<?phpnamespace app\common\model;use think\Model;use think\Log;class SaidModel extends Model{    //指定完整数据表名(仅供Db:table()使用)    protected $name = 'said';           //指定数据表名    //关闭自动写入时间戳字段    protected $autoWriteTimestamp = true;    //数据完成    protected $insert = ['ip'];    //自动完成写入ip    protected function setIpAttr()    {        return request()->ip();    }    //获取器（定义不存在的字段）    public function getStatusNameAttr($value, $data)    {        $status = [1 => '正常', 0 => '草稿'];        return $status[$data['status']];    }    /** 通过条件查询指定我的微语（如果唯一值不是null 查询指定一条记录）     * @param $map //查询条件     * @param  null $unique //是否唯一     * @return array|false|int|\PDOStatement|string|\think\Collection|\think\Model     */    public function selectInfoByMap($map, $unique = null)    {        try {            if (!empty($unique)) {                $result = $this->where($map)->find();            } else {                $result = $this->where($map)->select();            }            return $result;        } catch (\Exception $e) {            Log::error('通过条件查询指定我的微语出现错误，位置 common/SaidModel/selectInfoByMap,出错原因:' . $e->getMessage());            return -1;        }    }    /** 通过条件分页查询我的微语     * @param $map //查询条件     * @param  $page //查询条件     * @time  2017-09-13 23:18     * @return array|false|int|\PDOStatement|string|\think\Collection|\think\Model     */    public function selectPageByMap($map, $page)    {        try {            $result = $this->where($map)->page($page['pageIndex'], $page['pageSize'])->order('create_time desc')->select();            return $result;        } catch (\Exception $e) {            Log::error('通过条件分页查询我的微语出现错误，位置 common/SaidModel/selectPageByMap,出错原因:' . $e->getMessage());            return -1;        }    }    /** 通过条件获取查询我的微语总数     * @param $map //查询条件     * @time  2017-09-13 23:18     * @return array|false|int|\PDOStatement|string|\think\Collection|\think\Model     */    public function selectCountByMap($map)    {        try {            $result = $this->where($map)->count();            return $result;        } catch (\Exception $e) {            Log::error('通过条件获取查询我的微语总数出现错误，位置 common/SaidModel/selectCountByMap,出错原因:' . $e->getMessage());            return -1;        }    }    /**     * 新增一条我的微语言     * @param $data     * @time  2017-09-14 10:54     * @return false|int     */    public function addSaid($data)    {        try {            $res = $this->save($data);            return $res;        } catch (\Exception $e) {            Log::error('通过条件分页查询我的微语出现错误，位置 common/SaidModel/addSaid,出错原因:' . $e->getMessage());            return -1;        }    }    /**     * 通过ID修改一条我的微语言     * @param $data     * @time  2017-09-14 13:38     * @return false|int     */    public function editSadById($data)    {        try {            $res = $this->save($data,['id' => $data['id']]);            return $res;        } catch (\Exception $e) {            Log::error('通过ID修改一条我的微语言出现错误，位置 common/SaidModel/editSadById,出错原因:' . $e->getMessage());            return -1;        }    }    /**     * 通过id删除我的微语言     * @param $id     * @return int     */    public function deleteSadById($id)    {        try {            $res = $this->where('id', $id)->delete();            return $res;        } catch (\Exception $e) {            Log::error('通过id删除我的微语言言出现错误，位置 common/SaidModel/deleteSadById,出错原因:' . $e->getMessage());            return -1;        }    }}